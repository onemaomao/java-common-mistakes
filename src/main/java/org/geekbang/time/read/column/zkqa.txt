1. zk节点类型， stat信息的属性
见:org.apache.zookeeper.CreateMode
PERSISTENT,PERSISTENT_SEQUENTIAL,EPHEMERAL,EPHEMERAL_SEQUENTIAL
见:org.apache.zookeeper.data.Stat
存储数据节点本身的一些状态信息

2. watcher机制实现原理
zookeeper 提供了分布式数据的发布/订阅功能， zookeeper允许客户端向服务端注册一个 watcher 监听，当服务端的一些指定事件触发了 watcher，那么服务端就会向客户端发送一个事件通知。
值得注意的是， Watcher 通知是一次性的，即一旦触发一次通知后，该 Watcher 就失效了，因此客户端需要反复注册Watcher，即程序中在 process 里面又注册了 Watcher，否则，将无法获取 c3 节点的创建而导致子节点变化的事件。
事件有哪些?
见:org.apache.zookeeper.Watcher.Event.EventType
Curator 提供了三种 Watcher 来监听节点的变化
PathChildCache
NodeCache
TreeCache

3. jute序列化方式
https://www.cnblogs.com/jing99/p/12737135.html

4. zk的客户端和服务器端网络通讯协议
https://www.cnblogs.com/jing99/p/12737135.html
通讯协议TCP/IP
ZAB协议的两种模式
1. 崩溃恢复
2. 原子广播
原子广播的实现原理
1. leader 接收到消息请求后，将消息赋予一个全局唯一的64 位自增 id，叫： zxid，通过 zxid 的大小比较既可以实现因果有序这个特征
2. leader 为每个 follower 准备了一个 FIFO 队列（通过 TCP协议来实现，以实现了全局有序这一个特点）将带有 zxid的消息作为一个提案（proposal）分发给所有的 follower
3. 当 follower 接收到 proposal，先把 proposal 写到磁盘，写入成功以后再向 leader 回复一个 ack
4. 当 leader 接收到合法数量（超过半数节点）的 ACK 后，leader 就会向这些 follower 发送 commit 命令，同时会在本地执行该消息
5. 当 follower 收到消息的 commit 命令以后，会提交该消息
Observer 不需要参与投票过程，但是 Observer 必须要同步 Leader 的数据从而在处理请求的时候保证数据的一致
崩溃恢复的实现原理
1. 选举出新的 leader
2. 数据同步
已经被处理的消息不能丢,被丢弃的消息不能再次出现
ZAB 协议需要满足上面两种情况，就必须要设计一个leader 选举算法：能够确保已经被 leader 提交的事务Proposal 能够提交、同时丢弃已经被跳过的事务 Proposal。
针对这个要求
1. 如果 leader 选举算法能够保证新选举出来的 Leader 服务器拥有集群中所有机器最高编号（ZXID 最大）的事务Proposal，那么就可以保证这个新选举出来的 Leader 一定具有已经提交的提案。 因为所有提案被 COMMIT 之前必须有超过半数的 follower ACK，即必须有超过半数节点的服务器的事务日志上有该提案的 proposal，因此，只要有合法数量的节点正常工作，就必然有一个节点保存了所有被 COMMIT 消息的 proposal 状态
2. 另外一个， zxid 是 64 位，高 32 位是 epoch 编号，每经过一次 Leader 选举产生一个新的 leader，新的 leader会将 epoch 号+1，低 32 位是消息计数器，每接收到一条消息这个值+1，新 leader 选举后这个值重置为 0.这样设计的好处在于老的 leader 挂了以后重启，它不会被选举为 leader，因此此时它的 zxid 肯定小于当前新的leader。当老的 leader 作为 follower 接入新的 leader后，新的 leader 会让它将所有的拥有旧的 epoch 号的未被 COMMIT 的 proposal 清除

5. zk单机模式下的启动流程
org.apache.zookeeper.server.quorum.QuorumPeerMain.main
-->org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun
-->org.apache.zookeeper.server.ZooKeeperServerMain.main
-->......

6. zk集群模式下的启动流程

7. zk的会话管理机制
https://zhuanlan.zhihu.com/p/158566353

8. ClientCnxn：客户端核心工作类工作原理解析

9. 服务端处理请求流程 RequestProcessor
standalone， leader， follower， leader， observer分别各自的流程

10. zk选举的实现
FastLeaderElection，QuorumCnxManager

11. zk原子广播的实现
LearnerHandler

12. leader选举完后的数据同步流程

13. zk的文件存储



gupao2019
zk实战:
集群角色:Leader、Follower、Observer
数据模型:ZNode,树形结构
    持久节点（PERSISTENT）
    持久有序节点（PERSISTENT_SEQUENTIAL）
    临时节点(EPHEMERAL)
    临时有序节点(EPHEMERAL)
    org.apache.zookeeper.CreateMode
    CONTAINER,PERSISTENT_WITH_TTL,PERSISTENT_SEQUENTIAL_WITH_TTL?
会话:CONNECTING,CONNECTED,CLOSED
    org.apache.zookeeper.ZooKeeper.States
Stat状态信息:
    get 命令可以获得
    czxid,mzxid,ctime,mtime,version,cversion,aversion,ephemeralOwner,dataLength,numChildren,pzxid
版本-保证分布式数据原子性:
    3类版本信息:version,cversion,aversion
Watcher:发布/订阅功能
Zookeeper 基于 Java 访问
    zkclient、curator
    节点的增删改查
    节点的权限控制
    节点事件监听
        org.apache.zookeeper.Watcher.Event.EventType
        None,NodeCreated,NodeDeleted,NodeDataChanged,NodeChildrenChanged
--
zk核心原理
分布式锁的基本场景
用 zookeeper 来实现分布式锁
    惊群效应
利用临时有序节点来实现分布式锁
curator 分布式锁的基本使用
Curator 实现分布式锁的基本原理
释放锁的逻辑
使用 Zookeeper 实现 leader 选举
    Leader Latch
    LeaderSelector
Zookeeper 数据的同步流程
    ZAB 协议
    崩溃恢复的实现原理
        已经被处理的消息不能丢
        被丢弃的消息不能再次出现
    关于 ZXID
--
zk leader选举源码解析


